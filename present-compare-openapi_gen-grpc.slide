# Comparing OpenAPI-generator and gRPC 
API code generators for Go
12 Dec 2020

Loh Siu Yin
Technology Consultant

## What is wrong with this code?
.play -edit cmd/monolith/main.go

Shouldn't it use functions?

## Sum function
.play -edit cmd/sum-func/main.go

Shouldn't sum be in a library?

## arith library
.code cmd/sum-lib/main.go

Let's run the code:
```
go run cmd/sum-lib/main.go
```

## Should we make Sum a microservice?

Which should we use OpenAPI/Swagger or gRPC?

Lets start with OpenAPI.

The main resource is:  
[https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md).

## OpenAPI

Create our arithmetic API using [https://editor.swagger.io/](https://editor.swagger.io/).

Clear the editor and then copy-paste the following into the editor for validation.

```
view yaml-spec/arith.yaml
```

It should look like this:

.image img/swagger-editor.png  300 _

## Sum Server from scratch
As a learning exercise, I hand-wrote the
`sum` server from scratch.

.code cmd/server-handwritten/main.go /10_OMIT/,/20_OMIT/

## Testing the API and Server

Run the server:
```
go run cmd/server-handwritten/main.go
```

In the swagger API editor's right-hand pane:
```
Arithmetic | GET /sum | Try it out | Execute
```

Copy the curl command and run it locally on your computer:
```
curl -X GET "http://localhost:8080/sum?num1=2&num2=3" -H  "accept: application/json"
```

Trying changing the parameters, re-run and check the results.

## Hand-written server benchmarked:
```
ab -n 2000 -c 8 'http://localhost:8080/sum?num1=2&num2=3'

Concurrency Level:      8
Time taken for tests:   0.391 seconds
Complete requests:      2000
Requests per second:    5112.20 [#/sec] (mean)

Percentage of the requests served within a certain time (ms)
  50%      1
  66%      2
  75%      2
  80%      2
  90%      2
  95%      3
  98%      4
  99%      5
 100%      9 (longest request)
```
The above was run on a i3, 4-core laptop.
 

## Client and Server code stub generation
Swagger editor allows you to generate client and server
code stubs but I will use openapi-generator instead.

I used the docker image and ran it to generate a `go` client
and server stub with:

```
docker run -it --rm --user 1000:1000 \
 -v /home/siuyin:/h openapitools/openapi-generator-cli:v4.1.3 generate \
 -i /h/Downloads/arith.yaml -g go -o /h/Downloads/tmp/arith/client

docker run -it --rm --user 1000:1000 \
 -v /home/siuyin:/h openapitools/openapi-generator-cli:v4.1.3 generate \
 -i /h/Downloads/arith.yaml -g go-server -o /h/Downloads/tmp/arith/server
```

The above generated files in `/home/siuyin/Downloads/tmp/arith` `client`
and `server` folders.

v5.0.0-beta3 seems more complete but breaks go-server generation
due to type incompatibility when I tried it.

## Using the generated client

```
cp -r /h/Downloads/tmp/arith/client/ client
cd client
ls -F
README.md  api_arithmetic.go  configuration.go  git_push.sh  go.sum                model_sum_response.go
api/       client.go          docs/             go.mod       model_sum_request.go  response.go

rm git_push.sh go.sum go.mod
```

cmd/client/main.go:

.code cmd/client/main.go /10_OMIT/,/20_OMIT/

```
go run cmd/client/main.go
```

## Completing the generated server stub

```
cp -r /h/Downloads/tmp/arith/server/ cmd/server
ls -F cmd/server
```

Update import path in cmd/server/main.go from:
```
sw "./go"
```
to

.code cmd/server/main.go /10_OMIT/,/20_OMIT/


## Implement the server
Flesh out the implementation in cmd/server/go/api_arithmetic.go:

.code cmd/server/go/api_arithmetic.go  /10_OMIT/,/20_OMIT/

## Generated server benchmarked:
```
ab -n 2000 -c 8 'http://localhost:8080/sum?num1=2&num2=3'

Concurrency Level:      8
Time taken for tests:   0.543 seconds
Complete requests:      2000
Requests per second:    3680.83 [#/sec] (mean)

Percentage of the requests served within a certain time (ms)
  50%      2
  66%      2
  75%      3
  80%      3
  90%      4
  95%      4
  98%      5
  99%      6
 100%     10 (longest request)
```

## Notes on using OpenAPI with Go

1. Learn OpenAPI to write API specifications.
 Specs are written in yaml.
1. editor.swagger.io is a convenient on-line editor and validator.
1. openapi-generator for `go` is available as a docker container.
 The client library it generates is easy to use.  
 `cl := sw.NewAPIClient(sw.NewConfiguration())`  
 `sum, response, err := cl.{your_API}.SumGet(context.TODO(), {param1}, {param2})`
1. openapi-generator for `go-server` generates a minimal
 server stub. The import statement needs to be updated and
 you provide the implementation in  
 `go/api_{your_API}.go`

## gRPC
gRPC is an open source remote procedure call library contributed
by Google.

It uses protocol buffers instead of JSON to serialize messages.

Prerequisites:
See prerequisites section on [https://grpc.io/docs/languages/go/quickstart/](https://grpc.io/docs/languages/go/quickstart/).

## Service Definition
Language guide: [https://developers.google.com/protocol-buffers/docs/proto3](https://developers.google.com/protocol-buffers/docs/proto3).

.code proto/arith.proto

The 1's and 2's above are index IDs (slot positions)
and are not assignments.

## Code generation

```
mkdir -p garith

protoc --go_out=garith --go_opt=paths=source_relative \
 --go-grpc_out=garith --go-grpc_opt=paths=source_relative \
 proto/arith.proto
```
The above command generates code in folder garith:
```
ls -RF garith
```

## Implementing the gRPC Arith service

.code cmd/gserver/main.go /10_OMIT/,/20_OMIT/

The Sum, GetA and GetB methods are generated from your proto file.

## gRPC Arith service main boilerplate

.code cmd/gserver/main.go /20_OMIT/,/30_OMIT/

Running the server:
```
go run cmd/gserver/main.go
```

## Using the generated gRPC client

.code cmd/gclient/main.go /10_OMIT/,/20_OMIT/

## Benchmarking the gRPC Arith service

.code cmd/gbench/main.go /10_OMIT/,/20_OMIT/

```
go run cmd/gbench/main.go

go run cmd/gbench/main.go & go run cmd/gbench/main.go
```

## Notes on using gRPC with Go

1. Learn the protocol buffer language to define `.proto` interface files.
1. Using the generated client is easy:  
 `c := pb.New<your_API>Client(conn)`  
 `r, err := c.<your_API_rpc>(ctx, &pb.<YourRequest>{A: 2, B: 3})`
1. Fleshing out the server stub is easy. No data conversions to/from strings.
1. Not able to use `curl` to test service.


## Presentation and code download

.link https://github.com/siuyin/present-compare-openapi_gen-grpc
